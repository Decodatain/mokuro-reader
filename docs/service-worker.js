const s=location.pathname.split("/").slice(0,-1).join("/"),m=[s+"/_app/immutable/entry/app.b9d79f5c.js",s+"/_app/immutable/assets/0.768d6ae1.css",s+"/_app/immutable/nodes/0.d97c6a74.js",s+"/_app/immutable/assets/icon.06fcfdd6.webp",s+"/_app/immutable/nodes/1.50fc0fe7.js",s+"/_app/immutable/nodes/2.f30b325e.js",s+"/_app/immutable/assets/3.120bc3e7.css",s+"/_app/immutable/nodes/3.a7b10eb9.js",s+"/_app/immutable/nodes/4.732d9134.js",s+"/_app/immutable/nodes/5.05e318f5.js",s+"/_app/immutable/nodes/6.d791e7fe.js",s+"/_app/immutable/nodes/7.e77db3c5.js",s+"/_app/immutable/assets/8.436824e7.css",s+"/_app/immutable/nodes/8.3dd4fe08.js",s+"/_app/immutable/chunks/Input.3750b54b.js",s+"/_app/immutable/chunks/Listgroup.c59467cf.js",s+"/_app/immutable/chunks/Loader.3142fb0b.js",s+"/_app/immutable/chunks/P.0c6bcb21.js",s+"/_app/immutable/chunks/Settings.fb82d84b.js",s+"/_app/immutable/chunks/Spinner.17e89fb7.js",s+"/_app/immutable/chunks/TrashBinSolid.2dd60819.js",s+"/_app/immutable/chunks/db.60763777.js",s+"/_app/immutable/assets/db.1d121e74.css",s+"/_app/immutable/chunks/index.49308068.js",s+"/_app/immutable/chunks/index.82e508c7.js",s+"/_app/immutable/chunks/index.fba99ec1.js",s+"/_app/immutable/chunks/misc.b6c4c71b.js",s+"/_app/immutable/chunks/navigation.f65766f8.js",s+"/_app/immutable/chunks/scheduler.729d8167.js",s+"/_app/immutable/chunks/singletons.883e71db.js",s+"/_app/immutable/chunks/snackbar.24c7c16b.js",s+"/_app/immutable/chunks/stores.eba2874c.js",s+"/_app/immutable/chunks/zip-entry.18716e8a.js",s+"/_app/immutable/entry/start.3aca2c32.js"],u=[s+"/.nojekyll",s+"/favicon.png",s+"/icons/icon-128x128.png",s+"/icons/icon-144x144.png",s+"/icons/icon-152x152.png",s+"/icons/icon-192x192.png",s+"/icons/icon-384x384.png",s+"/icons/icon-48x48.png",s+"/icons/icon-512x512.png",s+"/icons/icon-72x72.png",s+"/icons/icon-96x96.png",s+"/manifest.json"],o="1745730744051",i=`cache-${o}`,p=[...m,...u];self.addEventListener("install",a=>{async function n(){await(await caches.open(i)).addAll(p)}a.waitUntil(n())});self.addEventListener("activate",a=>{async function n(){for(const e of await caches.keys())e!==i&&await caches.delete(e)}a.waitUntil(n())});self.addEventListener("fetch",a=>{if(a.request.method!=="GET")return;async function n(){const e=new URL(a.request.url),c=await caches.open(i);if(p.includes(e.pathname))return c.match(e.pathname);try{const t=await fetch(a.request);return t.status===200&&c.put(a.request,t.clone()),t}catch{return c.match(a.request)}}a.respondWith(n())});
