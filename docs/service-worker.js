const s=location.pathname.split("/").slice(0,-1).join("/"),m=[s+"/_app/immutable/entry/app.dfbef106.js",s+"/_app/immutable/assets/0.768d6ae1.css",s+"/_app/immutable/nodes/0.3f663e65.js",s+"/_app/immutable/assets/icon.06fcfdd6.webp",s+"/_app/immutable/nodes/1.b9cff781.js",s+"/_app/immutable/nodes/2.69e8ca5d.js",s+"/_app/immutable/assets/3.120bc3e7.css",s+"/_app/immutable/nodes/3.a7b10eb9.js",s+"/_app/immutable/nodes/4.247c1056.js",s+"/_app/immutable/nodes/5.22f0b88c.js",s+"/_app/immutable/nodes/6.06b89046.js",s+"/_app/immutable/nodes/7.11c21eea.js",s+"/_app/immutable/assets/8.436824e7.css",s+"/_app/immutable/nodes/8.0818a898.js",s+"/_app/immutable/chunks/Input.3750b54b.js",s+"/_app/immutable/chunks/Listgroup.c59467cf.js",s+"/_app/immutable/chunks/Loader.3142fb0b.js",s+"/_app/immutable/chunks/P.0c6bcb21.js",s+"/_app/immutable/chunks/Settings.01e6fa30.js",s+"/_app/immutable/chunks/Spinner.17e89fb7.js",s+"/_app/immutable/chunks/TrashBinSolid.2dd60819.js",s+"/_app/immutable/chunks/db.60763777.js",s+"/_app/immutable/assets/db.1d121e74.css",s+"/_app/immutable/chunks/index.97490faf.js",s+"/_app/immutable/chunks/index.fba99ec1.js",s+"/_app/immutable/chunks/index.fe26a936.js",s+"/_app/immutable/chunks/misc.1d9a4abd.js",s+"/_app/immutable/chunks/navigation.a76de7d0.js",s+"/_app/immutable/chunks/scheduler.729d8167.js",s+"/_app/immutable/chunks/singletons.8b19cfba.js",s+"/_app/immutable/chunks/snackbar.4bcbde71.js",s+"/_app/immutable/chunks/stores.403bdc61.js",s+"/_app/immutable/chunks/zip-entry.4874eda8.js",s+"/_app/immutable/entry/start.fa41d72d.js"],u=[s+"/favicon.png",s+"/icons/icon-128x128.png",s+"/icons/icon-144x144.png",s+"/icons/icon-152x152.png",s+"/icons/icon-192x192.png",s+"/icons/icon-384x384.png",s+"/icons/icon-48x48.png",s+"/icons/icon-512x512.png",s+"/icons/icon-72x72.png",s+"/icons/icon-96x96.png",s+"/manifest.json"],o="1745728273215",i=`cache-${o}`,p=[...m,...u];self.addEventListener("install",a=>{async function n(){await(await caches.open(i)).addAll(p)}a.waitUntil(n())});self.addEventListener("activate",a=>{async function n(){for(const e of await caches.keys())e!==i&&await caches.delete(e)}a.waitUntil(n())});self.addEventListener("fetch",a=>{if(a.request.method!=="GET")return;async function n(){const e=new URL(a.request.url),t=await caches.open(i);if(p.includes(e.pathname))return t.match(e.pathname);try{const c=await fetch(a.request);return c.status===200&&t.put(a.request,c.clone()),c}catch{return t.match(a.request)}}a.respondWith(n())});
