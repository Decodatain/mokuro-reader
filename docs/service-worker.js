const a=location.pathname.split("/").slice(0,-1).join("/"),m=[a+"/_app/immutable/entry/app.19593cfc.js",a+"/_app/immutable/assets/0.768d6ae1.css",a+"/_app/immutable/nodes/0.99b6ecfa.js",a+"/_app/immutable/assets/icon.06fcfdd6.webp",a+"/_app/immutable/nodes/1.0555b730.js",a+"/_app/immutable/nodes/2.828c4ce1.js",a+"/_app/immutable/assets/3.120bc3e7.css",a+"/_app/immutable/nodes/3.a7b10eb9.js",a+"/_app/immutable/nodes/4.1854a9e6.js",a+"/_app/immutable/nodes/5.9d6084a0.js",a+"/_app/immutable/nodes/6.eca197ad.js",a+"/_app/immutable/nodes/7.75fdd59d.js",a+"/_app/immutable/assets/8.436824e7.css",a+"/_app/immutable/nodes/8.4b07ea20.js",a+"/_app/immutable/chunks/Input.3750b54b.js",a+"/_app/immutable/chunks/Listgroup.c59467cf.js",a+"/_app/immutable/chunks/Loader.3142fb0b.js",a+"/_app/immutable/chunks/P.0c6bcb21.js",a+"/_app/immutable/chunks/Settings.4fa36d80.js",a+"/_app/immutable/chunks/Spinner.17e89fb7.js",a+"/_app/immutable/chunks/TrashBinSolid.2dd60819.js",a+"/_app/immutable/chunks/db.60763777.js",a+"/_app/immutable/assets/db.1d121e74.css",a+"/_app/immutable/chunks/index.25eabe26.js",a+"/_app/immutable/chunks/index.a8881894.js",a+"/_app/immutable/chunks/index.fba99ec1.js",a+"/_app/immutable/chunks/misc.3ba06c93.js",a+"/_app/immutable/chunks/navigation.c8089e81.js",a+"/_app/immutable/chunks/scheduler.729d8167.js",a+"/_app/immutable/chunks/singletons.c518ef07.js",a+"/_app/immutable/chunks/snackbar.55a9a3ca.js",a+"/_app/immutable/chunks/stores.21925c7d.js",a+"/_app/immutable/chunks/zip-entry.9dbb5bd8.js",a+"/_app/immutable/entry/start.b38e18ed.js"],u=[a+"/favicon.png",a+"/icons/icon-128x128.png",a+"/icons/icon-144x144.png",a+"/icons/icon-152x152.png",a+"/icons/icon-192x192.png",a+"/icons/icon-384x384.png",a+"/icons/icon-48x48.png",a+"/icons/icon-512x512.png",a+"/icons/icon-72x72.png",a+"/icons/icon-96x96.png",a+"/manifest.json"],o="1745729977806",i=`cache-${o}`,p=[...m,...u];self.addEventListener("install",s=>{async function n(){await(await caches.open(i)).addAll(p)}s.waitUntil(n())});self.addEventListener("activate",s=>{async function n(){for(const e of await caches.keys())e!==i&&await caches.delete(e)}s.waitUntil(n())});self.addEventListener("fetch",s=>{if(s.request.method!=="GET")return;async function n(){const e=new URL(s.request.url),c=await caches.open(i);if(p.includes(e.pathname))return c.match(e.pathname);try{const t=await fetch(s.request);return t.status===200&&c.put(s.request,t.clone()),t}catch{return c.match(s.request)}}s.respondWith(n())});
